// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique

  // VisuTry specific fields
  freeTrialsUsed Int      @default(0)  // Free trial uses (for non-premium users)
  premiumUsageCount Int   @default(0)  // Premium subscription usage count (resets on billing cycle)
  creditsBalance Int      @default(0)  // Purchased credits balance (never expire)
  isPremium      Boolean  @default(false)
  premiumExpiresAt DateTime?
  role             UserRole @default(USER)

  accounts      Account[]
  sessions      Session[]
  tryOnTasks    TryOnTask[]
  payments      Payment[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TryOnTask {
  id          String   @id @default(cuid())
  userId      String
  
  // Input images
  userImageUrl    String
  glassesImageUrl String
  
  // Output
  resultImageUrl  String?
  
  // Task status
  status      TaskStatus @default(PENDING)
  errorMessage String?
  
  // Metadata
  prompt      String?
  metadata    Json?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([userId, createdAt(sort: Desc)]) // Optimize dashboard recent tasks query
  @@index([userId, status]) // Optimize dashboard stats query
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  stripeSessionId String        @unique
  stripePaymentId String?       @unique
  
  amount          Int           // Amount in cents
  currency        String        @default("usd")
  status          PaymentStatus @default(PENDING)
  
  // Product info
  productType     ProductType
  description     String?
  
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([userId])
  @@index([status])
}

model GlassesFrame {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String
  category    String?
  brand       String?
  model       String?  // 型号代码
  price       Float?   // 价格
  style       String?  // 风格（clubmaster, round, cat-eye, etc.）
  material    String?  // 材质（acetate, metal, plastic）
  color       String?  // 颜色
  isActive    Boolean  @default(true)

  // 关联
  faceShapes  FrameFaceShapeRecommendation[]
  categories  FrameCategoryAssociation[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([brand])
  @@index([category])
  @@index([isActive])
}

enum TaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ProductType {
  PREMIUM_MONTHLY
  PREMIUM_YEARLY
  CREDITS_PACK
}

model FaceShape {
  id              String   @id @default(cuid())
  name            String   @unique // round, square, oval, etc.
  displayName     String   // "Round Face"
  description     String?
  characteristics String?  // 脸型特征

  frames          FrameFaceShapeRecommendation[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model GlassesCategory {
  id          String   @id @default(cuid())
  name        String   @unique // prescription, sunglasses, etc.
  displayName String   // "Prescription Glasses"
  description String?

  frames      FrameCategoryAssociation[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FrameFaceShapeRecommendation {
  id          String   @id @default(cuid())
  frameId     String
  faceShapeId String
  reason      String?  // 推荐原因

  frame       GlassesFrame @relation(fields: [frameId], references: [id], onDelete: Cascade)
  faceShape   FaceShape    @relation(fields: [faceShapeId], references: [id], onDelete: Cascade)

  @@unique([frameId, faceShapeId])
}

model FrameCategoryAssociation {
  id         String   @id @default(cuid())
  frameId    String
  categoryId String

  frame      GlassesFrame    @relation(fields: [frameId], references: [id], onDelete: Cascade)
  category   GlassesCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([frameId, categoryId])
}

enum UserRole {
  USER
  ADMIN
}
